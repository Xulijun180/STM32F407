#include "stm32f4xx.h"
#include "USART.h"
#include <stdio.h>
#include "string.h"
#include "stdbool.h"
#include "delay.h"


uint16_t PPM_data[4];
uint16_t PPM[4];
uint8_t channel=0;


uint8_t flag = 0;

/*****************************************
引脚说明：
PB6

TIM4_CH1(TIM4 -- APB1 16位  84MHZ)

*****************************************/


// 初始化PB14引脚作为PWM输入
void Pwm_PB14_InputInit(void)
{
    GPIO_InitTypeDef            GPIO_InitStructure;                // 定义GPIO初始化结构体
    TIM_TimeBaseInitTypeDef     TIM_TimeBaseStructure;            // 定义定时器基本结构体
    NVIC_InitTypeDef            NVIC_InitStructure;                // 定义中断优先级结构体
    TIM_ICInitTypeDef           TIM12_ICInitStructure;            // 定义定时器12输入捕获结构体

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM12, ENABLE);        // 使能TIM12时钟
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);        // 使能GPIOB时钟

    GPIO_InitStructure.GPIO_Pin     = GPIO_Pin_14;               // GPIOB14
    GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF;              // 备用功能
    GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_100MHz;         // 100MHz
    GPIO_InitStructure.GPIO_OType   = GPIO_OType_PP;             // 推挽输出
    GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_NOPULL;          // 无上拉或下拉
    GPIO_Init(GPIOB, &GPIO_InitStructure);                        // 初始化GPIOB

    // 定时器TIM12备用功能配置
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource14, GPIO_AF_TIM12);

    TIM_TimeBaseStructure.TIM_Prescaler        = 83;             // 定时器预分频
    TIM_TimeBaseStructure.TIM_CounterMode      = TIM_CounterMode_Up;  // 向上计数模式
    TIM_TimeBaseStructure.TIM_Period           = 49999;          // 自动重装载值
    TIM_TimeBaseStructure.TIM_ClockDivision    = TIM_CKD_DIV1;   // 时钟分频因子
    TIM_TimeBaseInit(TIM12, &TIM_TimeBaseStructure);

    // 初始化TIM12输入捕获参数
    TIM12_ICInitStructure.TIM_Channel      = TIM_Channel_1;       // 通道1
    TIM12_ICInitStructure.TIM_ICPolarity   = TIM_ICPolarity_Falling;  // 下降沿捕获
    TIM12_ICInitStructure.TIM_ICSelection  = TIM_ICSelection_DirectTI; // 直接映射到TI1
    TIM12_ICInitStructure.TIM_ICPrescaler  = TIM_ICPSC_DIV1;      // 输入预分频，无预分频
    TIM12_ICInitStructure.TIM_ICFilter     = 0x05;                // ICxF=0000输入滤波配置，无滤波
    // 初始化PWM输入模式
    TIM_PWMIConfig(TIM12, &TIM12_ICInitStructure);

    // 当工作在PWM输入模式时，只需要设置该通道的触发信号（用于测量周期）
    // 另一个通道（用于测量占空比）将由硬件配置，无需再次配置

    // 选择输入捕获触发信号
    TIM_SelectInputTrigger(TIM12, TIM_TS_TI1FP1);

    // 选择从模式：复位模式
    // 在PWM输入模式下，从模式必须工作在复位模式，在捕获开始时，计数器CNT将被重置
    TIM_SelectSlaveMode(TIM12, TIM_SlaveMode_Reset);
    TIM_SelectMasterSlaveMode(TIM12, TIM_MasterSlaveMode_Enable);

    // 使能捕获中断，此中断用于主捕获通道（测量周期）
    TIM_ITConfig(TIM12, TIM_IT_CC1, ENABLE);
    TIM_ClearITPendingBit(TIM12, TIM_IT_CC1);

    NVIC_InitStructure.NVIC_IRQChannel = TIM8_BRK_TIM12_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;    // 抢占优先级2
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;           // 子优先级0
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;              // 使能IRQ通道
    NVIC_Init(&NVIC_InitStructure);                              // 根据指定的参数初始化VIC寄存器

    TIM_Cmd(TIM12, ENABLE);    // 使能定时器12
}


uint32_t IC1Value, IC2Value;
float DutyCycle,Frequency;


//定时器4中断服务程序	 
/*
函数名: TIM8_BRK_TIM12_IRQHandler
功能: TIM8_BRK_TIM12 中断处理函数
*/
void TIM8_BRK_TIM12_IRQHandler(void)
{
    /* 清除定时器捕获/比较 1 中断标志位 */
    TIM_ClearITPendingBit(TIM12, TIM_IT_CC1);

    /* 获取输入捕获值 */
    IC1Value = TIM_GetCapture1(TIM12);
    IC2Value = TIM_GetCapture2(TIM12);

    // 计算高电平时间，即PPM信号的脉冲宽度
    uint16_t pulseWidth = IC1Value;

    // 根据通道号存储PPM信号数据



switch (channel)//Í¨µÀ¼ÇÂ¼
	{
		case 0:
			if(IC1Value>=5000)//Î²Ö¡£¨ÏÂÒ»Ö¡µÄÍ·Ö¡£¬ÎªÁËÈ·±£Í¨µÀÊý¶ÔÉÏ)
			{
			channel+=1;//Í¨µÀÊý
			TIM_SetCounter(TIM12, 0);//¿ªÊ¼¼ÇÂ¼µçÆµÊ±¼ä
			}
			else
			{
			TIM_SetCounter(TIM12, 0);
			}
			break
		
		case 1:
			if(IC1Value<=3000)//Ò»¸öppmÐÅºÅ×î¶àÎª2ms£¬·ÀÖ¹Êý¾ÝÓÐÎÊÌâ
			{
			channel+=1;//Í¨µÀÊý
		    PPM[0]=(IC1Value-400);//¼õÈ¥¹Ì¶¨µÄµÍµçÆ½Ê±¼ä£¨ÎÒÕâÓÃµÄÊÇÏÂ½µÑÓÖÐ¶Ï£¬»á¼ÇÂ¼ÉÏÒ»¸öµÄ¸ßµçÆ½Ê±¼äºÍµÍµçÆ½Ê±¼ä£©
			TIM_SetCounter(TIM12, 0);
			}
			break;
		
		case 2:
			if(IC1Value<=3000)
			{
			channel+=1;
			PPM[1]=(IC1Value-400);
			TIM_SetCounter(TIM12, 0);
			}
			break;
		
		case 3:
			if(IC1Value<=3000)
			{
			channel+=1;
			PPM[2]=(IC1Value-400);
			TIM_SetCounter(TIM12, 0);
			}
			break;
		
		case 4:
			if(IC1Value<=3000)
			{
			channel+=1;
			PPM[3]=(IC1Value-400);
			TIM_SetCounter(TIM12, 0);
			}
			break;
	}
	if(channel>4)
	{
		channel=0;
		memcpy(PPM_data,PPM,sizeof(PPM));//×ªÒÆÍ¨µÀÊý¾Ý
		memset(PPM,0,sizeof(PPM));//Êý¾ÝÇå³ý
		TIM_SetCounter(TIM12, 0);
	}

}



int main(void)
{   
    HW_USART1_Init(); //初始化串口1
    printf("HW_USART1_Init Success!\r\n");
    // Delay_ms(3000); //延时3s
	unsigned int count = 0;
	printf("SystemInit Start!\r\n");
    // Delay_ms(3000); //延时3s
	
	//设置NVIC分组 第二分组 抢占优先级范围:0~3  响应优先级范围：0~3
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
    printf("SystemInit Success!\r\n");
    // Delay_ms(3000); //延时3s
	

	Pwm_PB14_InputInit(); //初始化PWM输入引脚
    printf("Pwm_PB4_InputInit Success!\r\n");
	// Delay_ms(3000); //延时3s
	


			


    while (1)
    {

        // printf("PPM Channel 1: %d\r", PPM_data[0]);
        // printf("PPM Channel 2: %d\r", PPM_data[1]);
        // printf("PPM Channel 3: %d\r", PPM_data[2]);
        // printf("PPM Channel 4: %d\r", PPM_data[3]);
        

        printf("%d,%d,%d,%d\n", PPM_data[0], PPM_data[1], PPM_data[2], PPM_data[3]);
        // 延时一段时间，避免打印速度过快
        Delay_ms(50); // 例如延时1秒钟
    }



	return 0;
}

